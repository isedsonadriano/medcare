import { forwardRef, Directive, Pipe, Injectable, RendererFactory2, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';
import { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { utilsBr, validateBr, maskBr } from 'js-brasil';
import { ɵgetDOM, BrowserModule } from '@angular/platform-browser';
import { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';

import * as ɵngcc0 from '@angular/core';
const cpf = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cpf(v) ? null : { cpf: true };
};

const CPF_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CPFValidator),
    multi: true
};
class CPFValidator {
    validate(c) {
        return cpf(c);
    }
}
CPFValidator.ɵfac = function CPFValidator_Factory(t) { return new (t || CPFValidator)(); };
CPFValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CPFValidator, selectors: [["", "cpf", "", "formControlName", ""], ["", "cpf", "", "formControl", ""], ["", "cpf", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([CPF_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CPFValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
                providers: [CPF_VALIDATOR]
            }]
    }], null, null); })();

class CPFPipe {
    transform(cpfValue) {
        return maskBr.cpf(cpfValue);
    }
}
CPFPipe.ɵfac = function CPFPipe_Factory(t) { return new (t || CPFPipe)(); };
CPFPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "cpf", type: CPFPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CPFPipe, [{
        type: Pipe,
        args: [{
                name: 'cpf'
            }]
    }], null, null); })();

const cnpj = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cnpj(v) ? null : { cnpj: true };
};

const CNPJ_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CNPJValidator),
    multi: true
};
class CNPJValidator {
    validate(c) {
        return cnpj(c);
    }
}
CNPJValidator.ɵfac = function CNPJValidator_Factory(t) { return new (t || CNPJValidator)(); };
CNPJValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CNPJValidator, selectors: [["", "cnpj", "", "formControlName", ""], ["", "cnpj", "", "formControl", ""], ["", "cnpj", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([CNPJ_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CNPJValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
                providers: [CNPJ_VALIDATOR]
            }]
    }], null, null); })();

class CNPJPipe {
    transform(cnpjValue) {
        return maskBr.cnpj(cnpjValue);
    }
}
CNPJPipe.ɵfac = function CNPJPipe_Factory(t) { return new (t || CNPJPipe)(); };
CNPJPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "cnpj", type: CNPJPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CNPJPipe, [{
        type: Pipe,
        args: [{
                name: 'cnpj'
            }]
    }], null, null); })();

const telefone = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.telefone(v) ? null : { telefone: true };
};

const TELEFONE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TelefoneValidator),
    multi: true
};
class TelefoneValidator {
    validate(c) {
        return telefone(c);
    }
}
TelefoneValidator.ɵfac = function TelefoneValidator_Factory(t) { return new (t || TelefoneValidator)(); };
TelefoneValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TelefoneValidator, selectors: [["", "telefone", "", "formControlName", ""], ["", "telefone", "", "formControl", ""], ["", "telefone", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([TELEFONE_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TelefoneValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
                providers: [TELEFONE_VALIDATOR]
            }]
    }], null, null); })();

class TelefonePipe {
    transform(telefoneValue) {
        return maskBr.telefone(telefoneValue);
    }
}
TelefonePipe.ɵfac = function TelefonePipe_Factory(t) { return new (t || TelefonePipe)(); };
TelefonePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "telefone", type: TelefonePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TelefonePipe, [{
        type: Pipe,
        args: [{
                name: 'telefone'
            }]
    }], null, null); })();

const celular = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.celular(v) ? null : { celular: true };
};

const CELULAR_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CelularValidator),
    multi: true
};
class CelularValidator {
    validate(c) {
        return celular(c);
    }
}
CelularValidator.ɵfac = function CelularValidator_Factory(t) { return new (t || CelularValidator)(); };
CelularValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CelularValidator, selectors: [["", "celular", "", "formControlName", ""], ["", "celular", "", "formControl", ""], ["", "celular", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([CELULAR_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CelularValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
                providers: [CELULAR_VALIDATOR]
            }]
    }], null, null); })();

class CelularPipe {
    transform(celularValue) {
        return maskBr.celular(celularValue);
    }
}
CelularPipe.ɵfac = function CelularPipe_Factory(t) { return new (t || CelularPipe)(); };
CelularPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "celular", type: CelularPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CelularPipe, [{
        type: Pipe,
        args: [{
                name: 'celular'
            }]
    }], null, null); })();

const inscricaoestadual = (estado) => {
    return (control) => {
        if (utilsBr.isPresent(Validators.required(control))) {
            return null;
        }
        const v = control.value;
        return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
    };
};

const INSCRICAOESTADUAL_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => InscricaoEstadualValidator),
    multi: true
};
class InscricaoEstadualValidator {
    validate(c) {
        return inscricaoestadual('mg')(c);
    }
}
InscricaoEstadualValidator.ɵfac = function InscricaoEstadualValidator_Factory(t) { return new (t || InscricaoEstadualValidator)(); };
InscricaoEstadualValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InscricaoEstadualValidator, selectors: [["", "inscricaoestadual", "", "formControlName", ""], ["", "inscricaoestadual", "", "formControl", ""], ["", "inscricaoestadual", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([INSCRICAOESTADUAL_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InscricaoEstadualValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
                providers: [INSCRICAOESTADUAL_VALIDATOR]
            }]
    }], null, null); })();

class InscricaoEstadualPipe {
    transform(inscricaoestadualValue, estado) {
        return maskBr.inscricaoestadual(inscricaoestadualValue, estado);
    }
}
InscricaoEstadualPipe.ɵfac = function InscricaoEstadualPipe_Factory(t) { return new (t || InscricaoEstadualPipe)(); };
InscricaoEstadualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "inscricaoestadual", type: InscricaoEstadualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InscricaoEstadualPipe, [{
        type: Pipe,
        args: [{
                name: 'inscricaoestadual'
            }]
    }], null, null); })();

const cep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cep(v) ? null : { cep: true };
};

const CEP_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CEPValidator),
    multi: true
};
class CEPValidator {
    validate(c) {
        return cep(c);
    }
}
CEPValidator.ɵfac = function CEPValidator_Factory(t) { return new (t || CEPValidator)(); };
CEPValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CEPValidator, selectors: [["", "cep", "", "formControlName", ""], ["", "cep", "", "formControl", ""], ["", "cep", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([CEP_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CEPValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
                providers: [CEP_VALIDATOR]
            }]
    }], null, null); })();

class CEPPipe {
    transform(cepValue) {
        return maskBr.cep(cepValue);
    }
}
CEPPipe.ɵfac = function CEPPipe_Factory(t) { return new (t || CEPPipe)(); };
CEPPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "cep", type: CEPPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CEPPipe, [{
        type: Pipe,
        args: [{
                name: 'cep'
            }]
    }], null, null); })();

const currency = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.currency(v) ? null : { currency: true };
};

const CURRENCY_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CURRENCYValidator),
    multi: true
};
class CURRENCYValidator {
    validate(c) {
        return currency(c);
    }
}
CURRENCYValidator.ɵfac = function CURRENCYValidator_Factory(t) { return new (t || CURRENCYValidator)(); };
CURRENCYValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CURRENCYValidator, selectors: [["", "currency", "", "formControlName", ""], ["", "currency", "", "formControl", ""], ["", "currency", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([CURRENCY_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CURRENCYValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
                providers: [CURRENCY_VALIDATOR]
            }]
    }], null, null); })();

class CURRENCYPipe {
    transform(currencyValue) {
        return maskBr.currency(currencyValue);
    }
}
CURRENCYPipe.ɵfac = function CURRENCYPipe_Factory(t) { return new (t || CURRENCYPipe)(); };
CURRENCYPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "currencyBrazil", type: CURRENCYPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CURRENCYPipe, [{
        type: Pipe,
        args: [{
                name: 'currencyBrazil'
            }]
    }], null, null); })();

const number = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.number(v) ? null : { number: true };
};

const NUMBER_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => NUMBERValidator),
    multi: true
};
class NUMBERValidator {
    validate(c) {
        return number(c);
    }
}
NUMBERValidator.ɵfac = function NUMBERValidator_Factory(t) { return new (t || NUMBERValidator)(); };
NUMBERValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NUMBERValidator, selectors: [["", "number", "", "formControlName", ""], ["", "number", "", "formControl", ""], ["", "number", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([NUMBER_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NUMBERValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[number][formControlName],[number][formControl],[number][ngModel]',
                providers: [NUMBER_VALIDATOR]
            }]
    }], null, null); })();

class NUMBERPipe {
    transform(numberValue) {
        return maskBr.number(numberValue);
    }
}
NUMBERPipe.ɵfac = function NUMBERPipe_Factory(t) { return new (t || NUMBERPipe)(); };
NUMBERPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "numberBrazil", type: NUMBERPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NUMBERPipe, [{
        type: Pipe,
        args: [{
                name: 'numberBrazil'
            }]
    }], null, null); })();

const placa = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.placa(v) ? null : { placa: true };
};

const PLACA_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => PLACAValidator),
    multi: true
};
class PLACAValidator {
    validate(c) {
        return placa(c);
    }
}
PLACAValidator.ɵfac = function PLACAValidator_Factory(t) { return new (t || PLACAValidator)(); };
PLACAValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PLACAValidator, selectors: [["", "placa", "", "formControlName", ""], ["", "placa", "", "formControl", ""], ["", "placa", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([PLACA_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PLACAValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
                providers: [PLACA_VALIDATOR]
            }]
    }], null, null); })();

class PLACAPipe {
    transform(placaValue) {
        return maskBr.placa(placaValue);
    }
}
PLACAPipe.ɵfac = function PLACAPipe_Factory(t) { return new (t || PLACAPipe)(); };
PLACAPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "placa", type: PLACAPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PLACAPipe, [{
        type: Pipe,
        args: [{
                name: 'placa'
            }]
    }], null, null); })();

const percentage = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.porcentagem(v) ? null : { percentage: true };
};

const PERCENTAGE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PERCENTAGEValidator),
    multi: true
};
class PERCENTAGEValidator {
    validate(c) {
        return percentage(c);
    }
}
PERCENTAGEValidator.ɵfac = function PERCENTAGEValidator_Factory(t) { return new (t || PERCENTAGEValidator)(); };
PERCENTAGEValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PERCENTAGEValidator, selectors: [["", "percentage", "", "formControlName", ""], ["", "percentage", "", "formControl", ""], ["", "percentage", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([PERCENTAGE_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PERCENTAGEValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
                providers: [PERCENTAGE_VALIDATOR]
            }]
    }], null, null); })();

class PERCENTAGEPipe {
    transform(percentageValue) {
        return maskBr.porcentagem(percentageValue);
    }
}
PERCENTAGEPipe.ɵfac = function PERCENTAGEPipe_Factory(t) { return new (t || PERCENTAGEPipe)(); };
PERCENTAGEPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "percentage", type: PERCENTAGEPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PERCENTAGEPipe, [{
        type: Pipe,
        args: [{
                name: 'percentage'
            }]
    }], null, null); })();

const renavam = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.renavam(v) ? null : { renavam: true };
};

const RENAVAM_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RenavamValidator),
    multi: true
};
class RenavamValidator {
    validate(c) {
        return renavam(c);
    }
}
RenavamValidator.ɵfac = function RenavamValidator_Factory(t) { return new (t || RenavamValidator)(); };
RenavamValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RenavamValidator, selectors: [["", "renavam", "", "formControlName", ""], ["", "renavam", "", "formControl", ""], ["", "renavam", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([RENAVAM_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RenavamValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
                providers: [RENAVAM_VALIDATOR]
            }]
    }], null, null); })();

class RenavamPipe {
    transform(renavamValue) {
        return maskBr.renavam(renavamValue);
    }
}
RenavamPipe.ɵfac = function RenavamPipe_Factory(t) { return new (t || RenavamPipe)(); };
RenavamPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "renavam", type: RenavamPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RenavamPipe, [{
        type: Pipe,
        args: [{
                name: 'renavam'
            }]
    }], null, null); })();

const pispasep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.pispasep(v) ? null : { pispasep: true };
};

const PISPASE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PispasepValidator),
    multi: true
};
class PispasepValidator {
    validate(c) {
        return pispasep(c);
    }
}
PispasepValidator.ɵfac = function PispasepValidator_Factory(t) { return new (t || PispasepValidator)(); };
PispasepValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PispasepValidator, selectors: [["", "pispasep", "", "formControlName", ""], ["", "pispasep", "", "formControl", ""], ["", "pispasep", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([PISPASE_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PispasepValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
                providers: [PISPASE_VALIDATOR]
            }]
    }], null, null); })();

class PispasepPipe {
    transform(pispasepValue) {
        return maskBr.pispasep(pispasepValue);
    }
}
PispasepPipe.ɵfac = function PispasepPipe_Factory(t) { return new (t || PispasepPipe)(); };
PispasepPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pispasep", type: PispasepPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PispasepPipe, [{
        type: Pipe,
        args: [{
                name: 'pispasep'
            }]
    }], null, null); })();

const rg = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.rg(v) ? null : { rg: true };
};

const RG_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RGValidator),
    multi: true
};
class RGValidator {
    validate(c) {
        return rg(c);
    }
}
RGValidator.ɵfac = function RGValidator_Factory(t) { return new (t || RGValidator)(); };
RGValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RGValidator, selectors: [["", "rg", "", "formControlName", ""], ["", "rg", "", "formControl", ""], ["", "rg", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([RG_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RGValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
                providers: [RG_VALIDATOR]
            }]
    }], null, null); })();

class RGPipe {
    transform(rgValue) {
        return maskBr.rg(rgValue);
    }
}
RGPipe.ɵfac = function RGPipe_Factory(t) { return new (t || RGPipe)(); };
RGPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "rg", type: RGPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RGPipe, [{
        type: Pipe,
        args: [{
                name: 'rg'
            }]
    }], null, null); })();

const time = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.time(v) ? null : { time: true };
};

const TIME_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TIMEValidator),
    multi: true
};
class TIMEValidator {
    validate(c) {
        return time(c);
    }
}
TIMEValidator.ɵfac = function TIMEValidator_Factory(t) { return new (t || TIMEValidator)(); };
TIMEValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TIMEValidator, selectors: [["", "time", "", "formControlName", ""], ["", "time", "", "formControl", ""], ["", "time", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([TIME_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TIMEValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[time][formControlName],[time][formControl],[time][ngModel]',
                providers: [TIME_VALIDATOR]
            }]
    }], null, null); })();

class TIMEPipe {
    transform(timeValue) {
        return maskBr.time(timeValue);
    }
}
TIMEPipe.ɵfac = function TIMEPipe_Factory(t) { return new (t || TIMEPipe)(); };
TIMEPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "time", type: TIMEPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TIMEPipe, [{
        type: Pipe,
        args: [{
                name: 'time'
            }]
    }], null, null); })();

const titulo = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.titulo(v) ? null : { titulo: true };
};

const TITULO_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TITULOValidator),
    multi: true
};
class TITULOValidator {
    validate(c) {
        return titulo(c);
    }
}
TITULOValidator.ɵfac = function TITULOValidator_Factory(t) { return new (t || TITULOValidator)(); };
TITULOValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TITULOValidator, selectors: [["", "titulo", "", "formControlName", ""], ["", "titulo", "", "formControl", ""], ["", "titulo", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([TITULO_VALIDATOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TITULOValidator, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
                providers: [TITULO_VALIDATOR]
            }]
    }], null, null); })();

class TITULOPipe {
    transform(tituloValue) {
        return maskBr.titulo(tituloValue);
    }
}
TITULOPipe.ɵfac = function TITULOPipe_Factory(t) { return new (t || TITULOPipe)(); };
TITULOPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "titulo", type: TITULOPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TITULOPipe, [{
        type: Pipe,
        args: [{
                name: 'titulo'
            }]
    }], null, null); })();

class TextMaskConfig {
}
const MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MaskedInputDirective),
    multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
class MaskedInputDirective {
    constructor(rendererFactory, _elementRef, _compositionMode) {
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.textMaskConfig = {
            mask: [],
            guide: true,
            placeholderChar: '_',
            pipe: undefined,
            keepCharPositions: false,
        };
        this.onChange = (_) => { };
        this.onTouched = () => { };
        /** Whether the user is creating a composition string (IME events). */
        this._composing = false;
        this._renderer = rendererFactory.createRenderer(null, null);
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    ngOnChanges(changes) {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    }
    writeValue(value) {
        this._setupMask();
        // set the initial value for cases where the mask is disabled
        const normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(value);
        }
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    _handleInput(value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this._setupMask();
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
                // get the updated value
                value = this.inputElement.value;
                this.onChange(value);
            }
        }
    }
    _setupMask(create = false) {
        if (!this.inputElement) {
            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                // `textMask` directive is used directly on an input element
                this.inputElement = this._elementRef.nativeElement;
            }
            else {
                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
            }
        }
        if (this.inputElement && create) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
        }
    }
    _compositionStart() { this._composing = true; }
    _compositionEnd(value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    }
}
MaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(t) { return new (t || MaskedInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8)); };
MaskedInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MaskedInputDirective, selectors: [["", "textMask", ""]], hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MaskedInputDirective_input_HostBindingHandler($event) { return ctx._handleInput($event.target.value); })("blur", function MaskedInputDirective_blur_HostBindingHandler() { return ctx.onTouched(); })("compositionstart", function MaskedInputDirective_compositionstart_HostBindingHandler() { return ctx._compositionStart(); })("compositionend", function MaskedInputDirective_compositionend_HostBindingHandler($event) { return ctx._compositionEnd($event.target.value); });
    } }, inputs: { textMaskConfig: ["textMask", "textMaskConfig"] }, exportAs: ["textMask"], features: [ɵngcc0.ɵɵProvidersFeature([MASKEDINPUT_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });
MaskedInputDirective.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MaskedInputDirective, factory: MaskedInputDirective.ɵfac });
MaskedInputDirective.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ElementRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
];
MaskedInputDirective.propDecorators = {
    textMaskConfig: [{ type: Input, args: ['textMask',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaskedInputDirective, [{
        type: Injectable
    }, {
        type: Directive,
        args: [{
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                selector: '[textMask]',
                exportAs: 'textMask',
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COMPOSITION_BUFFER_MODE]
            }] }]; }, { textMaskConfig: [{
            type: Input,
            args: ['textMask']
        }] }); })();
class TextMaskModule {
}
TextMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextMaskModule });
TextMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextMaskModule_Factory(t) { return new (t || TextMaskModule)(); }, imports: [[
            BrowserModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextMaskModule, { declarations: function () { return [MaskedInputDirective]; }, imports: function () { return [BrowserModule]; }, exports: function () { return [MaskedInputDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextMaskModule, [{
        type: NgModule,
        args: [{
                imports: [
                    BrowserModule
                ],
                declarations: [MaskedInputDirective],
                exports: [MaskedInputDirective]
            }]
    }], null, null); })();

const TextMask = {
    TextMaskModule
};
const NgBrazilValidators = {
    cpf,
    cnpj,
    celular,
    cep,
    currency,
    inscricaoestadual,
    number,
    pispasep,
    placa,
    percentage,
    renavam,
    rg,
    telefone,
    time,
    titulo
};
const MASKS = utilsBr.MASKS;
const CustomDirectives = [
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CPFValidator,
    CPFPipe,
    CNPJValidator,
    CNPJPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RenavamValidator,
    RenavamPipe,
    RGValidator,
    RGPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
];
const NgBrDirectives = {
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CNPJValidator,
    CNPJPipe,
    CPFValidator,
    CPFPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RGValidator,
    RGPipe,
    RenavamValidator,
    RenavamPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
};
class NgBrazil {
    static forRoot() {
        return {
            ngModule: NgBrazil
        };
    }
}
NgBrazil.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBrazil });
NgBrazil.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBrazil_Factory(t) { return new (t || NgBrazil)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBrazil, { declarations: [CelularValidator,
        CelularPipe,
        CEPValidator,
        CEPPipe,
        CPFValidator,
        CPFPipe,
        CNPJValidator,
        CNPJPipe,
        CURRENCYValidator,
        CURRENCYPipe,
        InscricaoEstadualValidator,
        InscricaoEstadualPipe,
        NUMBERValidator,
        NUMBERPipe,
        PERCENTAGEValidator,
        PERCENTAGEPipe,
        PispasepValidator,
        PispasepPipe,
        PLACAValidator,
        PLACAPipe,
        RenavamValidator,
        RenavamPipe,
        RGValidator,
        RGPipe,
        TelefoneValidator,
        TelefonePipe,
        TIMEValidator,
        TIMEPipe,
        TITULOValidator,
        TITULOPipe], exports: [CelularValidator,
        CelularPipe,
        CEPValidator,
        CEPPipe,
        CPFValidator,
        CPFPipe,
        CNPJValidator,
        CNPJPipe,
        CURRENCYValidator,
        CURRENCYPipe,
        InscricaoEstadualValidator,
        InscricaoEstadualPipe,
        NUMBERValidator,
        NUMBERPipe,
        PERCENTAGEValidator,
        PERCENTAGEPipe,
        PispasepValidator,
        PispasepPipe,
        PLACAValidator,
        PLACAPipe,
        RenavamValidator,
        RenavamPipe,
        RGValidator,
        RGPipe,
        TelefoneValidator,
        TelefonePipe,
        TIMEValidator,
        TIMEPipe,
        TITULOValidator,
        TITULOPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBrazil, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    CustomDirectives
                ],
                exports: [
                    CustomDirectives
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CustomDirectives, MASKS, NgBrDirectives, NgBrazil, NgBrazilValidators, TextMask, MASKEDINPUT_VALUE_ACCESSOR as ɵa, MaskedInputDirective as ɵb, CURRENCYValidator as ɵba, CURRENCYPipe as ɵbb, InscricaoEstadualValidator as ɵbc, InscricaoEstadualPipe as ɵbd, NUMBERValidator as ɵbe, NUMBERPipe as ɵbf, PERCENTAGEValidator as ɵbg, PERCENTAGEPipe as ɵbh, PispasepValidator as ɵbi, PispasepPipe as ɵbj, PLACAValidator as ɵbk, PLACAPipe as ɵbl, RenavamValidator as ɵbm, RenavamPipe as ɵbn, RGValidator as ɵbo, RGPipe as ɵbp, TelefoneValidator as ɵbq, TelefonePipe as ɵbr, TIMEValidator as ɵbs, TIMEPipe as ɵbt, TITULOValidator as ɵbu, TITULOPipe as ɵbv, TextMaskModule as ɵc, cpf as ɵd, cnpj as ɵe, celular as ɵf, cep as ɵg, currency as ɵh, inscricaoestadual as ɵi, number as ɵj, pispasep as ɵk, placa as ɵl, percentage as ɵm, renavam as ɵn, rg as ɵo, telefone as ɵp, time as ɵq, titulo as ɵr, CelularValidator as ɵs, CelularPipe as ɵt, CEPValidator as ɵu, CEPPipe as ɵv, CPFValidator as ɵw, CPFPipe as ɵx, CNPJValidator as ɵy, CNPJPipe as ɵz };

//# sourceMappingURL=ng-brazil.js.map